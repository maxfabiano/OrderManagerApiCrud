@page "/"
@inject HttpClient Http
@using System.Diagnostics
@using System.Text.Json
@using System.Text
@using System.Net.Http
@using Microsoft.AspNetCore.Components
@inject NavigationManager Navigation

<div class="container mt-4">
    <div class="row">
        <!-- Coluna do Formulário -->
        <div class="col-lg-4">
            <div class="card shadow-sm">
                <div class="card-header text-white" style="background-color: #6495ED; font-weight: bold;">
                    Novo Pedido
                </div>
                <div class="card-body">
                    <form method="post" @onsubmit="Submit" @formname="starship-plain-form">
                        <AntiforgeryToken />

                        <div class="form-group">
                            <label for="pedidoNome">Pedido Nome:</label>
                            <InputText id="pedidoNome" class="form-control" @bind-Value="pedidoIten!.nome" placeholder="Digite o nome do pedido" />
                        </div>
                        <div class="form-group">
                            <label for="pedidoData">Pedido Data:</label>
                            <InputDate id="pedidoData" class="form-control" @bind-Value="dataInput" placeholder="Digite a data do pedido" />
                        </div>

                        <div class="form-group">
                            <label for="itemNome">Item Nome:</label>
                            <InputText id="itemNome" class="form-control" @bind-Value="iten!.nome" placeholder="Digite o nome do item" />
                        </div>
                        <div class="form-group">
                            <label for="itemValor">Item Valor:</label>
                            <InputNumber id="itemValor" class="form-control" @bind-Value="iten!.valor" placeholder="Digite o valor do item" />
                        </div>
                        <div class="form-group">
                            <label for="itemQuantidade">Item Quantidade:</label>
                            <InputNumber id="itemQuantidade" class="form-control" @bind-Value="iten!.quantidade" placeholder="Digite a quantidade do item" />
                        </div>
                        <button type="submit" class="btn btn-success w-100">Enviar</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Coluna da Tabela -->
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header text-white" style="background-color: #17a2b8; font-weight: bold;">
                    Pedidos
                </div>
                <div class="card-body">
                    <div class="form-inline mb-3">
                        <InputText id="filterNome" class="form-control mr-2" @onchange="ApplyFilters" @bind-Value="filterNome" placeholder="Filtrar por nome" />
                        <InputDate id="filterData" class="form-control mr-2" @bind-Value="filterData" />
                    </div>
                    <table class="table table-striped">
                        <thead class="thead-dark">
                            <tr>
                                <th>Id</th>
                                <th>Nome</th>
                                <th>Data</th>
                                <th>Valor Total</th>
                                <th>Item Id</th>
                                <th>Item Nome</th>
                                <th>Item Quantidade</th>
                                <th>Item Valor</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (pedidos == null)
                            {
                                <tr>
                                    <td colspan="8" class="text-center"><em>Carregando...</em></td>
                                </tr>
                            }
                            else if (!pedidos.Any())
                            {
                                <tr>
                                    <td colspan="8" class="text-center"><em>Nenhum pedido encontrado</em></td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var pedido in pedidos)
                                {
                                    <tr>
                                        <td>@pedido.id</td>
                                        <td>@pedido.nome</td>
                                        <td>@pedido.data</td>
                                        <td>@pedido.valorTotal</td>
                                        <td>@pedido.itens[0].id</td>
                                        <td>@pedido.itens[0].nome</td>
                                        <td>@pedido.itens[0].quantidade</td>
                                        <td>@pedido.itens[0].valor</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PedidoRecebido[]? pedidos;
    private string? filterNome;
    private DateTime? filterData;

    [SupplyParameterFromForm]
    private Pedido? pedidoIten { get; set; }
    [SupplyParameterFromForm]
    private Iten? iten { get; set; }
    [SupplyParameterFromForm]
    private DateTime? dataInput { get; set; }

    private string url = "https://localhost:5001/orders";
    private string antiforgeryToken = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadPedidos();
    }

    private async Task LoadPedidos()
    {
        try
        {
            pedidoIten ??= new();
            iten ??= new();

            var queryParams = new List<string>();
            if (!string.IsNullOrEmpty(filterNome))
            {
                queryParams.Add($"nome={filterNome}");
            }
            if (filterData.HasValue)
            {
                queryParams.Add($"data={filterData.Value:yyyy-MM-dd}");
            }

            var fullUrl = url + (queryParams.Any() ? "?" + string.Join("&", queryParams) : "");
            var response = await Http.GetAsync(fullUrl);
            response.EnsureSuccessStatusCode();

            pedidos = await response.Content.ReadFromJsonAsync<PedidoRecebido[]>();

            var responseT = await Http.GetFromJsonAsync<TokenResponse>("https://localhost:5001/orders/getToken");
            antiforgeryToken = responseT?.Token;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar pedidos: {ex.Message}");
        }
    }

    private async Task ApplyFilters()
    {
        await LoadPedidos();
        RecarregarPagina();
    }
    private void RecarregarPagina()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
    protected async void Submit()
    {
        try
        {
            pedidoIten.itens = new List<Iten> { iten };
            pedidoIten.itens[0] = iten;
            pedidoIten.data = dataInput?.ToString("dd-MM-yyyy");

            Root root = new Root { pedido = pedidoIten };
            string jsonContent = System.Text.Json.JsonSerializer.Serialize(root);

            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
            if (!string.IsNullOrEmpty(antiforgeryToken))
            {
                content.Headers.Add("X-CSRF-TOKEN", antiforgeryToken);
            }

            var response = await Http.PostAsync(url, content);
            response.EnsureSuccessStatusCode();

            // Recarregar tabela
            await LoadPedidos();

            pedidoIten = new Pedido { itens = new List<Iten> { new Iten() } };
            RecarregarPagina();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao enviar o pedido: {ex.Message}");
        }
    }

    public class Iten
    {
        public string nome { get; set; }
        public int valor { get; set; }
        public int quantidade { get; set; }
    }

    public class PedidoRecebido
    {
        public int id { get;  set; }

        public string nome { get; set; }
        public string data { get; set; }

        public decimal valorTotal { get; set; }
        public List<ItenRecebido> itens { get; set; }
    }
    public class Pedido
    {
        public string nome { get; set; }
        public string data { get; set; }
        public List<Iten> itens { get; set; }
    }
    public class ItenRecebido
    {
        public int id { get;  set; }

        public string nome { get; set; }
        public decimal valor { get; set; }
        public int quantidade { get; set; }

        public int PedidoId { get; set; }

    }
    public class Root
    {
        public Pedido pedido { get; set; }
    }
    public class TokenResponse
    {
        public string Token { get; set; }
    }

}
